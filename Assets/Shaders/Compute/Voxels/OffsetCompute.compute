#pragma kernel CSMain

int resolution;
int resolution2;
int updateAll;
float voxelSize;
float halfSize;
float angularCompensation;
float correctionFactor;

StructuredBuffer<float> tables;

struct Voxel
{
    int update;
    int solid;
    float density;
    float4 position;
    int indicy;
};

RWStructuredBuffer<Voxel> voxels;

float CalcVoxelNumber(int a, int b, int c, int d)
{
    int numSolid = 0;
    if (voxels[a].solid == 1)
    {
        numSolid++;
    }
    if (voxels[b].solid == 1)
    {
        numSolid++;
    }
    if (voxels[c].solid == 1)
    {
        numSolid++;
    }
    if (voxels[d].solid == 1)
    {
        numSolid++;
    }
    
    return float(numSolid);
}

[numthreads(8,8,8)]
void CSMain (int3 id : SV_DispatchThreadID)
{
    int o = (id.x + 1) * resolution2 + (id.y + 1) * resolution + (id.z + 1);
    //If voxel has been modified rececently
    if (voxels[o].update == 1 || updateAll == 1)
    {
        //Move 1 backwards in each axis as offsets are "offset" 1 on the grid
        o -= resolution2 + resolution + 1;
        if (id.x < resolution - 1 && id.y < resolution - 1 && id.z < resolution - 1)
        {
            //Voxel coords of influential voxels
            int x = o + resolution2;
            int y = o + resolution;
            int z = o + 1;
            int xy = x + resolution;
            int xz = x + 1;
            int yz = y + 1;
            int xyz = xy + 1;
        
            //if all empty
            if (voxels[o].solid == 0 && voxels[x].solid == 0 && voxels[y].solid == 0 && voxels[z].solid == 0 &&
            voxels[xy].solid == 0 && voxels[xz].solid == 0 && voxels[yz].solid == 0 && voxels[xyz].solid == 0)
            {
                voxels[o].position = float4(0, 0, 0, -1);
            }
            //if all solid
            else if (voxels[o].solid == 1 && voxels[x].solid == 1 && voxels[y].solid == 1 && voxels[z].solid == 1 &&
            voxels[xy].solid == 1 && voxels[xz].solid == 1 && voxels[yz].solid == 1 && voxels[xyz].solid == 1)
            {
                voxels[o].position = float4(0, 0, 0, 0);
            }
            //else calculate position of offset point based on densities
            else
            {
                //Add up all densities for the plane in the negative direction, also get the number of solid voxels
                int xNegNum = CalcVoxelNumber(o, y, z, yz);
                //Do the same for the plane in the positive direction
                int xPosNum = CalcVoxelNumber(x, xy, xz, xyz);
                //Calculate intial mesh smoothing based on lookup tables and numbers of solid voxels
                float xOffset = tables[32 + (xNegNum * 5) + xPosNum];
                
                //Repeat on remaining two axis
                int yNegNum = CalcVoxelNumber(o, x, z, xz);
                int yPosNum = CalcVoxelNumber(y, xy, yz, xyz);
                float yOffset = tables[32 + (yNegNum * 5) + yPosNum];
            
                int zNegNum = CalcVoxelNumber(o, x, y, xy);
                int zPosNum = CalcVoxelNumber(z, xz, yz, xyz);
                float zOffset = tables[32 + (zNegNum * 5) + zPosNum];
            
                //Add them all up and apply the final position
                float4 offset = float4(xOffset, yOffset, zOffset, 0) * voxelSize;
                float4 position = float4((id.x + 0.5) * voxelSize - halfSize, (id.y + 0.5) * voxelSize - halfSize, (id.z + 0.5) * voxelSize - halfSize, 1.0);
            
                voxels[o].position = position + offset;
            }
        }
    }
}
